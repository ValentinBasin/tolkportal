// Define an interface for the environment variables passed to the config function.
interface EnvParams {
  env: (key: string, defaultValue?: any) => any;
}

const middlewaresConfig: (params: EnvParams) => Array<string | object> = ({
  env,
}) => [
  "strapi::logger",
  "strapi::errors",
  {
    // Modify the security middleware to include S3 domains in CSP
    name: "strapi::security",
    config: {
      contentSecurityPolicy: {
        useDefaults: true,
        directives: {
          "connect-src": ["'self'", "https:"],
          // Add your S3 bucket domain(s) to img-src and media-src
          "img-src": ["'self'", "data:", "blob:", env("AWS_BUCKET_URL", "")],
          "media-src": ["'self'", "data:", "blob:", env("AWS_BUCKET_URL", "")],
          // Potentially add your CDN domain if you are using one
          // 'img-src': ["'self'", 'data:', 'blob:', env('AWS_BUCKET_URL', ''), env('CDN_URL', '')],
          // 'media-src': ["'self'", 'data:', 'blob:', env('AWS_BUCKET_URL', ''), env('CDN_URL', '')],
          upgradeInsecureRequests: null, // Often useful for mixed content
        },
      },
    },
  },
  {
    name: "strapi::cors",
    config: {
      enabled: true,
      origin: [env("FRONTEND_URL")], // Use env for FRONTEND_URL as well
      headers: "*",
      methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"],
    },
  },
  // Removed duplicate 'strapi::cors' as it's configured above
  "strapi::poweredBy",
  "strapi::query",
  "strapi::body",
  "strapi::session",
  "strapi::favicon",
  "strapi::public",
];

export default middlewaresConfig;
