name: Deploy Test

on:
  push:
    branches:
      - test

jobs:
  build-and-push:
    environment: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Check if backend/ changed
        id: changes_backend
        run: |
          if git diff --quiet HEAD^ HEAD -- backend/; then
            echo "no changes"
            echo "changed=false" >> "$GITHUB_OUTPUT"
          else
            echo "changes found"
            echo "changed=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Build and push Backend image
        if: steps.changes_backend.outputs.changed == 'true'
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/tolkportal_backend:test .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/tolkportal_backend:test
        working-directory: backend

      - name: Check if frontend/ changed
        id: changes_frontend
        run: |
          if git diff --quiet HEAD^ HEAD -- frontend/; then
            echo "no changes"
            echo "changed=false" >> "$GITHUB_OUTPUT"
          else
            echo "changes found"
            echo "changed=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Build and push Frontend image
        if: steps.changes_frontend.outputs.changed == 'true'
        run: |
          docker build --build-arg VITE_STRAPI_API_URL=${{ vars.TEST_API_URL }} -t ${{ secrets.DOCKERHUB_USERNAME }}/tolkportal_frontend:test .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/tolkportal_frontend:test
        working-directory: frontend

  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    environment: test

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
      AWS_REGION: ${{secrets.AWS_REGION}}
      TF_VAR_hcloud_token: ${{ secrets.HCLOUD_TOKEN }}
      TF_VAR_cloudflare_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      TF_VAR_server_name: ${{ vars.SERVER_NAME }}
      TF_VAR_zone_id: ${{ vars.ZONE_ID }}
      TF_VAR_ssh_key: ${{ secrets.SSH_KEY }}
      # TF_VAR_aws_region: ${{ vars.AWS_REGION }}
      # TF_VAR_backup_bucket_name: ${{ vars.AWS_BACKUP_BUCKET }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: terraform

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: |
          terraform init \
          -backend-config="bucket=${{ vars.TF_STATE_BUCKET }}" \
          -backend-config="key=${{ vars.TF_STATE_KEY }}" \
          -backend-config="region=${{ vars.TF_STATE_REGION }}"

        # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt -check

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: terraform plan -input=false

        # On push to "main", build or change infrastructure according to Terraform configuration files
        # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      - name: Terraform Apply
        run: |
          terraform apply -auto-approve -input=false
          terraform output -json > $GITHUB_WORKSPACE/terraform_outputs.json 2>/dev/null
          #echo "$(terraform output -json)" > $GITHUB_WORKSPACE/terraform_outputs.json 
          cat -A $GITHUB_WORKSPACE/terraform_outputs.json
          od -c $GITHUB_WORKSPACE/terraform_outputs.json
